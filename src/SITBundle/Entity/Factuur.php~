<?php
namespace SITBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 * @ORM\Table(name="factuur")
 */
class Factuur
{
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\Column(type="integer", unique=true)
     */
    private $factuurnummer;

    /**
     * @ORM\Column(type="date")
     */
    private $factuurdatum;

    /**
     * @ORM\Column(type="date")
     */
    private $factuurVerloopDatum;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $referentie;

    /**
     * @ORM\OneToMany(targetEntity="FactuurProductKoppeling", mappedBy="factuur", cascade={"all"}, orphanRemoval=true)
     */
    private $producten;

    /**
     * @ORM\OneToMany(targetEntity="CustomProduct", mappedBy="factuur", cascade={"all"}, orphanRemoval=true)
     */
    private $customProducten;

    /**
     * @ORM\ManyToOne(targetEntity="Gebruiker")
     * @ORM\JoinColumn(name="gebruiker_id", referencedColumnName="id")
     */
    private $gebruiker;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $naam;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $adres;

    /**
     * @ORM\Column(type="string", length=7, nullable=true)
     */
    private $postcode;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $woonplaats;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $email;

    /**
     * @ORM\OneToOne(targetEntity="BetaalLink")
     * @ORM\JoinColumn(name="betaallink_id", referencedColumnName="id")
     */
    private $betaalLink;

    /**
     * @ORM\OneToMany(targetEntity="Gebruiker_MolliePayment", mappedBy="factuur")
     */
    private $gebruikerMolliePayments;

    /**
     * @Assert\Choice({"inc", "ex"})
     * @ORM\Column(type="string", length=3)
     */
    private $type;

    /**
     * @Assert\Choice({"open", "betaald", "geannuleerd", "verlopen"})
     * @ORM\Column(type="string", length=12)
     */
    private $status;

    /**
     * @ORM\Column(type="boolean")
     */
    private $chargePaymentCost;


    private $displayFactuurnummer;
    private $factuurnaam;


    public function __toString()
    {
        return $this->factuurdatum->format('Y').sprintf('%04d', $this->factuurnummer);
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->type = "inc";

        $this->producten = new \Doctrine\Common\Collections\ArrayCollection();
        $this->customProducten = new \Doctrine\Common\Collections\ArrayCollection();

        $this->factuurdatum = new \DateTime("NOW");
        $this->factuurVerloopDatum = new \DateTime("NOW");
        $this->factuurVerloopDatum->add(new \DateInterval('P14D'));
    }

    public function getDisplayFactuurnummer()
    {
        return $this->factuurdatum->format('Y').sprintf('%04d', $this->factuurnummer);
    }

    public function getFactuurnaam()
    {
        if($this->getGebruiker() == null) {
            return $this->getNaam();
        }else{
            return $this->getGebruiker()->getFullName();
        }
    }

    public function getBTWBedrag($type) {
        $totaal = 0;
        if($type == 'totaal') {
            foreach ($this->producten as $product) {
                $totaal += ($product->getAantal() * $product->getProduct()->getPrijs()) * ($product->getProduct()->getBtw() / 100);
            }
            foreach ($this->customProducten as $product) {
                $totaal += ($product->getAantal() * $product->getIncPrijs()) * ($product->getBtw() / 100);
            }
        }else{
            foreach ($this->producten as $product) {
                if($product->getProduct()->getBtw() == $type)
                    $totaal += ($product->getAantal() * $product->getProduct()->getPrijs()) * ($product->getProduct()->getBtw() / 100);
            }
            foreach ($this->customProducten as $product) {
                if($product->getBtw() == $type)
                    $totaal += ($product->getAantal() * $product->getIncPrijs()) * ($product->getBtw() / 100);
            }
        }

        return $totaal;
    }

    public function getIncBedrag($type) {
        $totaal = 0;
        if($type == 'totaal') {
            foreach ($this->producten as $product) {
                $totaal += ($product->getAantal() * $product->getProduct()->getPrijs());
            }
            foreach ($this->customProducten as $product) {
                $totaal += ($product->getAantal() * $product->getIncPrijs());
            }
        }else{
            foreach ($this->producten as $product) {
                if($product->getProduct()->getBtw() == $type)
                    $totaal += ($product->getAantal() * $product->getProduct()->getPrijs());
            }
            foreach ($this->customProducten as $product) {
                if($product->getBtw() == $type)
                    $totaal += ($product->getAantal() * $product->getIncPrijs());
            }
        }

        return $totaal;
    }

    public function getBetalenBedrag() {
        return $this->getIncBedrag('totaal');
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set factuurnummer
     *
     * @param string $factuurnummer
     *
     * @return Factuur
     */
    public function setFactuurnummer($factuurnummer)
    {
        $this->factuurnummer = $factuurnummer;

        return $this;
    }

    /**
     * Get factuurnummer
     *
     * @return string
     */
    public function getFactuurnummer()
    {
        return $this->factuurnummer;
    }

    /**
     * Set factuurdatum
     *
     * @param \DateTime $factuurdatum
     *
     * @return Factuur
     */
    public function setFactuurdatum($factuurdatum)
    {
        $this->factuurdatum = $factuurdatum;

        return $this;
    }

    /**
     * Get factuurdatum
     *
     * @return \DateTime
     */
    public function getFactuurdatum()
    {
        return $this->factuurdatum;
    }

    /**
     * Set factuurVerloopDatum
     *
     * @param \DateTime $factuurVerloopDatum
     *
     * @return Factuur
     */
    public function setFactuurVerloopDatum($factuurVerloopDatum)
    {
        $this->factuurVerloopDatum = $factuurVerloopDatum;

        return $this;
    }

    /**
     * Get factuurVerloopDatum
     *
     * @return \DateTime
     */
    public function getFactuurVerloopDatum()
    {
        return $this->factuurVerloopDatum;
    }

    /**
     * Set referentie
     *
     * @param \DateTime $referentie
     *
     * @return Factuur
     */
    public function setReferentie($referentie)
    {
        $this->referentie = $referentie;

        return $this;
    }

    /**
     * Get referentie
     *
     * @return \DateTime
     */
    public function getReferentie()
    {
        return $this->referentie;
    }

    /**
     * Set naam
     *
     * @param string $naam
     *
     * @return Factuur
     */
    public function setNaam($naam)
    {
        $this->naam = $naam;

        return $this;
    }

    /**
     * Get naam
     *
     * @return string
     */
    public function getNaam()
    {
        return $this->naam;
    }

    /**
     * Set adres
     *
     * @param string $adres
     *
     * @return Factuur
     */
    public function setAdres($adres)
    {
        $this->adres = $adres;

        return $this;
    }

    /**
     * Get adres
     *
     * @return string
     */
    public function getAdres()
    {
        return $this->adres;
    }

    /**
     * Set postcode
     *
     * @param string $postcode
     *
     * @return Factuur
     */
    public function setPostcode($postcode)
    {
        $this->postcode = $postcode;

        return $this;
    }

    /**
     * Get postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->postcode;
    }

    /**
     * Set woonplaats
     *
     * @param string $woonplaats
     *
     * @return Factuur
     */
    public function setWoonplaats($woonplaats)
    {
        $this->woonplaats = $woonplaats;

        return $this;
    }

    /**
     * Get woonplaats
     *
     * @return string
     */
    public function getWoonplaats()
    {
        return $this->woonplaats;
    }

    /**
     * Add producten
     *
     * @param \SITBundle\Entity\FactuurProductKoppeling  $producten
     *
     * @return Factuur
     */
    public function addProducten(\SITBundle\Entity\FactuurProductKoppeling  $producten)
    {
        $this->producten[] = $producten;
        $producten->setFactuur($this);

        return $this;
    }

    /**
     * Remove producten
     *
     * @param \SITBundle\Entity\FactuurProductKoppeling  $producten
     */
    public function removeProducten(\SITBundle\Entity\FactuurProductKoppeling  $producten)
    {
        $this->producten->removeElement($producten);
    }

    /**
     * Get producten
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProducten()
    {
        return $this->producten;
    }

    /**
     * Set gebruiker
     *
     * @param \SITBundle\Entity\Gebruiker $gebruiker
     *
     * @return Factuur
     */
    public function setGebruiker(\SITBundle\Entity\Gebruiker $gebruiker = null)
    {
        $this->gebruiker = $gebruiker;

        return $this;
    }

    /**
     * Get gebruiker
     *
     * @return \SITBundle\Entity\Gebruiker
     */
    public function getGebruiker()
    {
        return $this->gebruiker;
    }

    /**
     * Set betaalLink
     *
     * @param \SITBundle\Entity\BetaalLink $betaalLink
     *
     * @return Factuur
     */
    public function setBetaalLink(\SITBundle\Entity\BetaalLink $betaalLink = null)
    {
        $this->betaalLink = $betaalLink;

        return $this;
    }

    /**
     * Get betaalLink
     *
     * @return \SITBundle\Entity\BetaalLink
     */
    public function getBetaalLink()
    {
        return $this->betaalLink;
    }

    /**
     * Set type
     *
     * @param string $type
     *
     * @return Factuur
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get type
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set status
     *
     * @param string $status
     *
     * @return Factuur
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return string
     */
    public function getStatus()
    {
        if($this->status == "Open")
            if ($this->betaalLink != null)
                if (count($this->betaalLink->getBetalendeGebruikers()) > 0)
                    return $this->status = 'Betaald';

        if ($this->status == "Open") {
            $verloopdatum = $this->getFactuurVerloopDatum();
            $verloopdatum->add(new \DateInterval('P1D'));
            if (new \DateTime("NOW") >= $verloopdatum)
                return "Verlopen";
        }

        return $this->status;
    }

    /**
     * Set email
     *
     * @param string $email
     *
     * @return Factuur
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Add customProducten
     *
     * @param \SITBundle\Entity\CustomProduct $customProducten
     *
     * @return Factuur
     */
    public function addCustomProducten(\SITBundle\Entity\CustomProduct $customProducten)
    {
        $this->customProducten[] = $customProducten;

        return $this;
    }

    /**
     * Remove customProducten
     *
     * @param \SITBundle\Entity\CustomProduct $customProducten
     */
    public function removeCustomProducten(\SITBundle\Entity\CustomProduct $customProducten)
    {
        $this->customProducten->removeElement($customProducten);
    }

    /**
     * Get customProducten
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCustomProducten()
    {
        return $this->customProducten;
    }

    /**
     * Set chargePaymentCost
     *
     * @param boolean $chargePaymentCost
     *
     * @return Factuur
     */
    public function setChargePaymentCost($chargePaymentCost)
    {
        $this->chargePaymentCost = $chargePaymentCost;
    
        return $this;
    }

    /**
     * Get chargePaymentCost
     *
     * @return boolean
     */
    public function getChargePaymentCost()
    {
        return $this->chargePaymentCost;
    }
}
